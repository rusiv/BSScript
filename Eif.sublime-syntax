%YAML 1.2
---
file_extensions:
  - eif
scope: source.Eif
variables:
  identifier: '[_$[:alpha:]][_$[:alnum:]]*'
contexts:
  main:
    - match: ''
      push: [section]
  string:
    - match: "'"
      scope: punctuation.definition.string.begin
      push:
        - meta_scope: string.quoted.single
        - match: "'"
          scope: punctuation.definition.string.end
          pop: true
  keywordsctn:
    - match: '\b(?i:(Encoding|Name|Type|Version|SectionID|ObjectType|ObjectName|TableName|ParentObject|RootNode))\b'
      scope: keyword.control.Section
  keywordlr:
    - match: '\b(?i:(DESCRIPTION|ENGLISH|RUSSIAN))\b'
      scope: keyword.control.LR
  keyval:
    - match: '(.*)=(.*)'
      scope: keyword.control.keyval
  section:
    - match: '(?i:\[SECTION\])'
      scope: punctuation.defenition.block.begin
      push:
        - meta_scope: meta.block.section
        - include: keywordsctn    
        - include: data
        - match: '(?:\[END\])'
          scope: punctuation.defenition.block.end
          pop: true
  data:
    - match: '(?i:\[DATA\])'
      scope: punctuation.section.block.begin
      push:
        - meta_scope: meta.block.data
        - include: languages
        - include: strings
        - match: '(?=\[.*\])'
          scope: punctuation.defenition.block.end
          pop: true
  languages:    
    - match: '(?i:\[LANGUAGES\])'
      scope: punctuation.section.block.begin
      push:
        - meta_scope: meta.block.languages
        - match: '(?=\[.*\])'
          scope: punctuation.defenition.block.end
          pop: true
  lrDeclaration:
    - match: '(?:(  .+:))'
      scope: entity.name.struct.decalaration
    - match: '(?:\n)'
      pop: true
  lr:
    - match: '(?:(  .+:))'
      scope: entity.name.struct      
    - match: (?=(  .+:))
      pop: true
  strings:
    - match: '(?i:\[STRINGS\])'
      scope: punctuation.defenition.block.begin
      push:
        - meta_scope: meta.block.strings
        - include: lr
        - match: '(?=\[.*\])'
          scope: punctuation.section.block.end
          pop: true